#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2013 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

from gentoopm import get_package_manager
from gentoopm.basepm.atom import PMAtom
from gentoopm.exceptions import EmptyPackageSetError

from gpyutils.ansi import ANSI
from gpyutils.eclasses import guess_package_type, PkgType

import sys

pm = get_package_manager()

def process(pkgs, output, assume_r1 = False):
	sys.stderr.write('%s%sWaiting for PM to start iterating...%s\r'
			% (ANSI.clear_line, ANSI.brown, ANSI.reset))

	total_need = [0]

	for p in pkgs:
		sys.stderr.write('%s%s%-56s%s (%s%4d%s found)\r'
				% (ANSI.clear_line, ANSI.green, p, ANSI.reset,
					ANSI.white, total_need[0], ANSI.reset))

		t = guess_package_type(p, check_deps=False)
		if not assume_r1 and not isinstance(t, PkgType.python_r1):
			continue

		def check_dep(dep, total_need, depth = 0, was_first = [True],
				curr_pkg = p):
			if isinstance(dep, PMAtom):
				if dep.blocking:
					return
				for p2 in output.keys():
					if p2 in dep:
						# avoid infinite loops
						output[p2] += 1
						return

				# USE deps cause problems with matching, strip them
				# Note to self: this is ugly.
				dep = pm.Atom(str(dep).partition('[')[0])

				try:
					dep_pkg = pm.repositories['gentoo'].select(dep)
				except EmptyPackageSetError:
	#				print('%s: no package matches %s' % (p, dep))
					return

				dep_t = guess_package_type(dep_pkg)
				if isinstance(dep_t, PkgType.python_r0):
					# in case stdout & stderr goes to the same console,
					# clean up the line before printing
					sys.stderr.write('%s\r' % ANSI.clear_line)

					if was_first[0]:
						print('%s' % p)
						was_first[0] = False
						total_need[0] += 1
					print('%s%s' % ('    ' * (depth + 1), dep))

					# depscan takes a while, so re-output status
					sys.stderr.write('%s%s%-56s%s (%s%4d%s found)\r'
							% (ANSI.clear_line, ANSI.green, p, ANSI.reset,
								ANSI.white, total_need[0], ANSI.reset))

					output[dep_pkg] = 1

					for d in (dep_pkg.run_dependencies,
							dep_pkg.build_dependencies,
							dep_pkg.post_dependencies):
						check_dep(d, total_need, depth + 1, was_first, dep_pkg)
			else:
				for dp in dep:
					check_dep(dp, total_need, depth, was_first, curr_pkg)

		for d in (p.run_dependencies, p.build_dependencies, p.post_dependencies):
			check_dep(d, total_need)

	sys.stderr.write('%s%sDone.%s\n'
			% (ANSI.clear_line, ANSI.white, ANSI.reset))

def main(prog_name, *argv):
	output = {}

	sys.stderr.write('[note: each package is listed at most once]\n')

	if not argv:
		process(pm.repositories['gentoo'], output)
	else:
		for pkg in argv:
			process(pm.repositories['gentoo'].filter(pkg), output, assume_r1=True)

	print('Statistics:')
	for p, count in sorted(output.items(), key=lambda x: x[1]):
		print(' %4d %s' % (count, p))

	return 0

if __name__ == '__main__':
	sys.exit(main(*sys.argv))
