#!/usr/bin/env python
#   vim:fileencoding=utf-8
# (c) 2013-2020 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

from gentoopm import get_package_manager
from gentoopm.basepm.atom import PMAtom

from gpyutils.ansi import ANSI
from gpyutils.eclasses import guess_package_type, PkgType
from gpyutils.implementations import (get_python_impls, get_impl_by_name,
        read_implementations)
from gpyutils.packages import get_package_class, group_packages, PackageClass
from gpyutils.pycompat import EbuildMangler

import argparse
import functools
import sys

pm = get_package_manager()


def process_one(p, repo, py2, py3too):
    impls = get_python_impls(p)
    if impls is None:
        # not a Python package
        return None

    if py2 not in impls:
        return False
    if not py3too:
        # only pure py2
        for i in impls:
            if i.r1_name.startswith('python3'):
                return False
    else:
        # only py2+py3
        for i in impls:
            if i.r1_name.startswith('python3'):
                break
        else:
            return False

    # in case stdout & stderr goes to the same console,
    # clean up the line before printing
    sys.stderr.write('%s\r' % ANSI.clear_line)
    print(p.slotted_atom)
    return True


def process(repo, pkgs, py2, py3too):
    total_upd = 0
    total_pkg = 0

    sys.stderr.write('%s%sWaiting for PM to start iterating...%s\r'
            % (ANSI.clear_line, ANSI.brown, ANSI.reset))

    for pg in group_packages(pkgs, key = 'slotted_atom'):
        sys.stderr.write('%s%s%-40s%s (%s%4d%s of %s%4d%s need checking)\r'
                % (ANSI.clear_line, ANSI.green, pg[0].key, ANSI.reset,
                    ANSI.white, total_upd, ANSI.reset,
                    ANSI.white, total_pkg, ANSI.reset))

        p = pg[-1]
        r = process_one(p, repo, py2, py3too)

        if r is None:
            continue
        total_pkg += 1
        if r:
            total_upd += 1

    sys.stderr.write('%s%sDone.%s\n'
            % (ANSI.clear_line, ANSI.white, ANSI.reset))


def main(prog_name, *argv):
    opt = argparse.ArgumentParser(prog=prog_name)
    opt.add_argument('-3', dest='py3', action='store_true',
            help='Print packages having py2+py3 (default: pure py2)')
    opt.add_argument('-r', '--repo', default='gentoo',
            help='Work on given repository (default: gentoo)')
    opt.add_argument('package', nargs='*',
            help='Packages to scan (whole repo if none provided')
    vals = opt.parse_args(list(argv))

    read_implementations(pm)

    py2 = get_impl_by_name('python2_7')

    if not vals.package:
        process(pm.repositories[vals.repo], pm.repositories[vals.repo],
                py2, vals.py3)
    else:
        package_cache = set()
        for pkg in vals.package:
            process(pm.repositories[vals.repo],
                pm.repositories[vals.repo].filter(pkg), py2, vals.py3)

    return 0

if __name__ == '__main__':
    sys.exit(main(*sys.argv))
