#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2013 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

from gentoopm import get_package_manager

from gpyutils.ansi import ANSI
from gpyutils.eclasses import guess_package_type, PkgType
from gpyutils.implementations import (get_python_impls, get_impl_by_name,
		read_implementations)
from gpyutils.packages import get_package_class, group_packages, PackageClass
from gpyutils.pycompat import EbuildMangler

import optparse, sys

pm = get_package_manager()

def process(pkgs, old, new, fix=False):
	total_upd = 0
	total_pkg = 0

	sys.stderr.write('%s%sWaiting for PM to start iterating...%s\r'
			% (ANSI.clear_line, ANSI.brown, ANSI.reset))

	for pg in group_packages(pkgs):
		sys.stderr.write('%s%s%-40s%s (%s%4d%s of %s%4d%s need checking)\r'
				% (ANSI.clear_line, ANSI.green, pg[0].key, ANSI.reset,
					ANSI.white, total_upd, ANSI.reset,
					ANSI.white, total_pkg, ANSI.reset))

		p = pg[-1]

		impls = get_python_impls(p)
		if impls is None:
			# not a Python package
			continue

		if old in impls:
			if not new.r0_name and isinstance(guess_package_type(p),
					PkgType.python_r0):
				continue

			total_pkg += 1
			if new not in impls:
				total_upd += 1
				# in case stdout & stderr goes to the same console,
				# clean up the line before printing
				sys.stderr.write('%s\r' % ANSI.clear_line)
				print(p.slotted_atom)

				if fix and isinstance(guess_package_type(p),
						PkgType.python_r1):
					upd_list = []

					for p in reversed(pg):
						upd_list.append(p.path)

						# update all non-keyworded (possibly live) ebuilds
						# and the newest keyworded ebuild, then stop
						if get_package_class(p) != PackageClass.non_keyworded:
							break

					for path in upd_list:
						try:
							with EbuildMangler(path) as em:
								em.add(new.r1_name)
						except Exception as e:
							sys.stderr.write('%s%s%s\n'
									% (ANSI.brown, str(e), ANSI.reset))

	sys.stderr.write('%s%sDone.%s\n'
			% (ANSI.clear_line, ANSI.white, ANSI.reset))

def main(prog_name, *argv):
	opt = optparse.OptionParser(
		prog = prog_name,
		usage = '%prog <old-impl> <new-impl> [<packages>...]')
	opt.add_option('-f', '--fix', action='store_true',
			dest='fix', default=False,
			help='Automatically add <new-impl> to PYTHON_COMPAT in the newest testing (and live) ebuild')
	opt.add_option('-r', '--repo',
			dest='repo', default='gentoo',
			help='Work on given repository (default: gentoo)')
	vals, argv = opt.parse_args(list(argv))

	if len(argv) < 2:
		opt.error('Two implementations need to be provided')

	read_implementations(pm)

	old = get_impl_by_name(argv[0])
	new = get_impl_by_name(argv[1])

	if len(argv) == 2:
		process(pm.repositories[vals.repo], old, new, fix=vals.fix)
	else:
		for pkg in argv[2:]:
			process(pm.repositories[vals.repo].filter(pkg), old, new,
				fix=vals.fix)

	return 0

if __name__ == '__main__':
	sys.exit(main(*sys.argv))
