#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2013 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

# Note: this tool is temporarily unmaintained.

from gentoopm.pkgcorepm import PkgCorePM
from gentoopm.pkgcorepm.atom import PkgCoreAtom

import sys

pm = PkgCorePM()

class PkgType(object):
	class other(object):
		def __gt__(self, other):
			return False

		def __ge__(self, other):
			return other is PkgType.other

	class multi(object):
		def __gt__(self, other):
			return other is PkgType.other

		def __ge__(self, other):
			return other is PkgType.other or other is PkgType.multi

	class single(object):
		def __gt__(self, other):
			return other is not PkgType.single

		def __ge__(self, other):
			return True

	def __new__(cls, pkg):
		if 'python-r1' in pkg.inherits:
			return cls.multi
		elif 'python-single-r1' in pkg.inherits:
			return cls.single
		else:
			return cls.other

	@classmethod
	def from_flag(cls, f):
		if f.startswith('python_targets'):
			return cls.multi
		elif f.startswith('python_single_target'):
			return cls.single
		else:
			return cls.other

	@classmethod
	def from_dep(cls, dep):
		# XXX: support other PMs than pkgcore
		return max([cls.from_flag(f) for f in dep._r.use or ('',)])

def process(pkgs):
	for p in pkgs:
		t = PkgType(p)
		if t is PkgType.other:
			continue

		listed_deps = []
		def check_dep(dep):
			if isinstance(dep, PkgCoreAtom):
				if dep.blocking:
					return
				if dep in listed_deps:
					return
				dep_type = PkgType.from_dep(dep)
				if dep_type != PkgType.other:
					return

				# USE deps cause problems with matching, strip them
				dep = pm.Atom(str(dep).partition('[')[0])

				pkgs = list(pm.stack.filter(dep))
				if not pkgs:
					print('%s: no package matches %s' % (p, dep))
					return

				dep_pkg_type = max([PkgType(x) for x in pkgs])
				if dep_type >= dep_pkg_type:
					return

				if dep_type is PkgType.multi:
					print('%s: must not depend on python-single-r1 pkg %s' % (p, dep))
				elif dep_type is PkgType.other:
					print('%s: needs PYTHON_USEDEP on %s' % (p, dep))
				else:
					raise AssertionError('Unknown bad dep?')

				listed_deps.append(dep)
			else:
				for dp in dep:
					check_dep(dp)

		for d in (p.run_dependencies, p.build_dependencies, p.post_dependencies):
			check_dep(d)

if len(sys.argv) == 1:
	process(pm.stack)
else:
	for pkg in sys.argv[1:]:
		process(pm.stack.filter(pkg))
