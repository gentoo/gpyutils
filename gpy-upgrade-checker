#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2013 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

from gentoopm import get_package_manager

from gpyutils.ansi import ANSI
from gpyutils.implementations import get_python_impls, get_impl_by_name
from gpyutils.packages import group_packages

import sys

pm = get_package_manager()

def process(pkgs, old, new):
	total_upd = 0
	total_pkg = 0

	sys.stderr.write('%s%sWaiting for PM to start iterating...%s\r'
			% (ANSI.clear_line, ANSI.brown, ANSI.reset))

	for pg in group_packages(pkgs):
		sys.stderr.write('%s%s%-40s%s (%s%4d%s of %s%4d%s need checking)\r'
				% (ANSI.clear_line, ANSI.green, pg[0].key, ANSI.reset,
					ANSI.white, total_upd, ANSI.reset,
					ANSI.white, total_pkg, ANSI.reset))

		p = pg[-1]

		impls = get_python_impls(p)
		if impls is None:
			# not a Python package
			continue

		if old in impls:
			total_pkg += 1
			if new not in impls:
				total_upd += 1
				# in case stdout & stderr goes to the same console,
				# clean up the line before printing
				sys.stderr.write('%s\r' % ANSI.clear_line)
				print(p.slotted_atom)

	sys.stderr.write('%s%sDone.%s\n'
			% (ANSI.clear_line, ANSI.white, ANSI.reset))

if len(sys.argv) < 3:
	print('Usage: %s <old-impl> <new-impl> [<packages>...]' % sys.argv[0])
	sys.exit(1)

old = get_impl_by_name(sys.argv[1])
new = get_impl_by_name(sys.argv[2])


if len(sys.argv) == 3:
	process(pm.repositories['gentoo'], old, new)
else:
	for pkg in sys.argv[3:]:
		process(pm.stack.filter(pkg), old, new)
