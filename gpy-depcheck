#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2013 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

# Note: this tool is temporarily unmaintained.

from gentoopm import get_package_manager
from gentoopm.basepm.atom import PMAtom

from gpyutils.ansi import ANSI
from gpyutils.eclasses import guess_package_type, PkgType
from gpyutils.packages import group_packages

import re
import sys

pm = get_package_manager()

def process(pkgs, repo):
	usedep_re = re.compile(r'^(?P<pkg>[^\[]*)(?:\[(?P<flags>[^:]*)\])?(?:::.*)?$')

	sys.stderr.write('%s%sWaiting for PM to start iterating...%s\r'
			% (ANSI.clear_line, ANSI.brown, ANSI.reset))

	total_need = 0
	total_pkg = 0

	dep_cache = {}

	for pg in group_packages(pkgs):
		sys.stderr.write('%s%s%-40s%s (%s%4d%s of %s%4d%s potentially broken)\r'
				% (ANSI.clear_line, ANSI.green, pg[0].key, ANSI.reset,
					ANSI.white, total_need, ANSI.reset,
					ANSI.white, total_pkg, ANSI.reset))

		any_r1 = False
		for p in pg:
			t = guess_package_type(p)
			if not isinstance(t, PkgType.python_r1):
				continue
			any_r1 = True

			found_missing = []
			def check_dep(dep):
				if not isinstance(dep, PMAtom):
					for dp in dep:
						check_dep(dp)
				else:
					if dep.blocking:
						return
					# skip duplicates
					if dep in found_missing:
						return

					# please close your eyes, it's ugly. really.
					m = usedep_re.match(str(dep))
					flags = (m.group('flags') or '').split(',')
					for f in flags:
						if f.startswith('python_targets_'):
							# ok, dep's there
							return

					sdep = pm.Atom(m.group('pkg'))

					if not sdep in dep_cache:
						pkgs = list(repo.filter(sdep))
						if not pkgs:
							sys.stderr.write('%s%s: no package matches %s%s\n'
									% (ANSI.brown, p, sdep, ANSI.reset))
							return

						dep_pkg_type = max([guess_package_type(x, check_deps=False)
								for x in pkgs])
						dep_cache[sdep] = dep_pkg_type
					else:
						dep_pkg_type = dep_cache[sdep]

					if isinstance(dep_pkg_type, PkgType.python_r1):
						sys.stderr.write('%s\r' % ANSI.clear_line)
						if not found_missing:
							print(p)
						print('\t%s' % dep)

						sys.stderr.write('%s%s%-40s%s (%s%4d%s of %s%4d%s potentially broken)\r'
								% (ANSI.clear_line, ANSI.green, pg[0].key, ANSI.reset,
									ANSI.white, total_need, ANSI.reset,
									ANSI.white, total_pkg, ANSI.reset))

						found_missing.append(dep)

			dep_groups = (p.run_dependencies, p.build_dependencies,
					p.post_dependencies)
			if hasattr(p, 'cbuild_build_dependencies'):
				dep_groups += (p.cbuild_build_dependencies,)
			for d in dep_groups:
				check_dep(d)
			if found_missing:
				total_need += 1
				break

		if any_r1:
			total_pkg += 1

	sys.stderr.write('%s%sDone.%s\n'
			% (ANSI.clear_line, ANSI.white, ANSI.reset))

def main(prog_name, *argv):
	repo = pm.repositories['gentoo']

	if not argv:
		process(repo, repo=repo)
	else:
		for pkg in argv:
			process(repo.filter(pkg), repo=repo)

	return 0

if __name__ == '__main__':
	sys.exit(main(*sys.argv))
