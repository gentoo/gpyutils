#!/usr/bin/env python
#	vim:fileencoding=utf-8
# (c) 2017 Michał Górny <mgorny@gentoo.org>
# Released under the terms of the 2-clause BSD license.

from gentoopm import get_package_manager
from gentoopm.basepm.atom import PMAtom
from gentoopm.exceptions import EmptyPackageSetError

from gpyutils.ansi import ANSI

import collections
import optparse
import sys


match_cache = {}
revmatch_cache = collections.defaultdict(set)
pm = get_package_manager()


class DotPrinter(object):
	def start(self):
		print('digraph {')
		print('\trankdir=LR;')

	def add_node(self, label, mark=False):
		if mark:
			print('\t"%s" [color="blue"];' % label)
		else:
			print('\t"%s";' % label)

	def add_edge(self, src, dst, label):
		print('\t"%s" -> "%s" [label="%s"];' % (src, dst, label))

	def finish(self):
		print('}')


class NXBase(object):
	def start(self):
		import networkx
		self.nx = networkx
		self.graph = networkx.DiGraph()

	def add_node(self, label, mark=False):
		# TODO: mark?
		self.graph.add_node(label, marked=mark)

	def add_edge(self, src, dst, label):
		self.graph.add_edge(src, dst, label=label)


class NXNodeDFS(NXBase):
	def finish(self):
		for n in self.nx.dfs_postorder_nodes(self.graph):
			print(n)


class MaintainerMarker(object):
	""" Class providing node marking based on maintainer. """

	def __init__(self, maintainers):
		self.maintainers = frozenset(maintainers)

	def should_mark(self, p):
		for maint in p.maintainers:
			if maint.email in self.maintainers:
				return True
		return False


def process(repo, pkgs, processor, marker):
	sys.stderr.write('%sPopulating match cache...%s\n'
			% (ANSI.cyan, ANSI.reset))

	mark_packages = set()

	for i, p in enumerate(pkgs):
		sys.stderr.write('%s%s%-56s%s (%s%4d%s/%s%4d%s done)\r'
				% (ANSI.clear_line, ANSI.green, p, ANSI.reset,
					ANSI.white, i, ANSI.reset,
					ANSI.white, len(pkgs), ANSI.reset))

		matches = frozenset(repo.filter(p))
		if not matches:
			raise ValueError('%s matches no packages!' % p)
		match_cache[p] = matches
		for m in matches:
			if marker.should_mark(m):
				mark_packages.add(p)

			revmatch_cache[m].add(p)

	sys.stderr.write('%s%sGenerating the graph...%s\n'
			% (ANSI.clear_line, ANSI.cyan, ANSI.reset))
	processor.start()

	# list all packages first, so we do not skip packages with no deps
	for p in pkgs:
		processor.add_node(p, p in mark_packages)

	for i, p in enumerate(pkgs):
		# TODO: option to check deps for all versions?
		pkg = repo.select(p)
		sys.stderr.write('%s%s%-56s%s (%s%4d%s/%s%4d%s done)\r'
				% (ANSI.clear_line, ANSI.green, p, ANSI.reset,
					ANSI.white, i, ANSI.reset,
					ANSI.white, len(pkgs), ANSI.reset))

		def check_dep(dep):
			if isinstance(dep, PMAtom):
				if dep.blocking:
					return

				# USE deps cause problems with matching, strip them
				# Note to self: this is ugly.
				dep = pm.Atom(str(dep).partition('[')[0])

				if dep not in match_cache:
					match_cache[dep] = frozenset(repo.filter(dep))

				for m in match_cache[dep]:
					try:
						for matom in revmatch_cache[m]:
							yield matom
						break
					except KeyError:
						pass
			else:
				for dp in dep:
					for r in check_dep(dp):
						yield r

		dep_sets = (
			('r', frozenset(check_dep(pkg.run_dependencies))),
			('b', frozenset(check_dep(pkg.build_dependencies))),
			('p', frozenset(check_dep(pkg.post_dependencies))),
		)
		combined = set()
		for t, dep_pkgs in dep_sets:
			combined |= dep_pkgs

		sys.stderr.write('%s\r' % ANSI.clear_line)
		for dep in combined:
			dep_types = []
			for t, dep_pkgs in dep_sets:
				if dep in dep_pkgs:
					dep_types.append(t)
			assert dep_types

			dep_type = '+'.join(dep_types) + 'dep'
			processor.add_edge(p, dep, dep_type)

	sys.stderr.write('%s%sDone.%s\n'
			% (ANSI.clear_line, ANSI.white, ANSI.reset))
	processor.finish()


def main(prog_name, *argv):
	opt = optparse.OptionParser(
		prog = prog_name,
		usage = '%prog [<files>...]')
	opt.add_option('-d', '--dot-print',
			dest='proc_cls', action='store_const',
			const=DotPrinter, default=DotPrinter,
			help='Output a .dot graph (default)')
	opt.add_option('-n', '--node-dfs',
			dest='proc_cls', action='store_const',
			const=NXNodeDFS,
			help='Produce list of nodes in depth-first-search (uses networkx)')
	opt.add_option('-m', '--mark-maintainer',
			dest='mark_maint', action='append', default=[],
			help='Highlight packages maintained by specified person/project (by e-mail)')
	opt.add_option('-r', '--repo',
			dest='repo', default='gentoo',
			help='Work on given repository (default: gentoo)')
	vals, argv = opt.parse_args(list(argv))

	all_packages = set()

	if argv:
		for fn in argv:
			with open(fn) as f:
				for l in f:
					all_packages.add(pm.Atom(l.strip()))
	else:
		sys.stderr.write('[reading package dependency spec list from stdin]')
		for l in sys.stdin:
			all_packages.add(pm.Atom(l.strip()))

	process(pm.repositories[vals.repo], all_packages, vals.proc_cls(),
			MaintainerMarker(vals.mark_maint))

	return 0


if __name__ == '__main__':
	sys.exit(main(*sys.argv))
